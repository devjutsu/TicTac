@using TicTac.Shared
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.SignalR.Client;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject HubConnection HubConnection

<AuthorizeView>
    <Authorized>
        <div>@context.User.Identity.Name</div>
        <p>&nbsp;</p>
        <button @onclick="Register" disabled="@(!IsConnected)">Ready!</button> @*|| _registered*@
        @if(_registered && !_started)
        {
            <div>Waiting for game to start...</div>
        }
        else if(_started)
        {
            <div>board</div>
        }
    </Authorized>
    <NotAuthorized>
        <LoginDisplay />
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool _registered = false;
    private bool _started = false;
    private bool IsConnected => HubConnection.State == HubConnectionState.Connected;
    private string _connectionId;

    protected override async Task OnInitializedAsync()
    {
        HubConnection.On<string>("Register", message =>
        {
            Console.WriteLine($"{message}");
            _registered = true;
            StateHasChanged();
        });

        HubConnection.On<string, string>("GameStart", (x, o) =>
        {
            Console.WriteLine($"X: {x}, O: {o}");
            _started = true;
            StateHasChanged();
        });

        HubConnection.On<string, string>("broadcastMessage", (from, message) =>
        {
            Console.WriteLine($"From: {from}, Message: {message}");
        });

        _connectionId = HubConnection.ConnectionId;
        Console.WriteLine(_connectionId);

        await HubConnection.StartAsync();
    }

    public async Task Register()
    {
        Console.WriteLine($"Registering... {HubConnection.ConnectionId}");
        await Http.GetAsync($"toe/register/{HubConnection.ConnectionId}");
    }

    public async ValueTask DisposeAsync()
    {
        if (HubConnection is not null)
        {
            await HubConnection.DisposeAsync();
        }
    }
}