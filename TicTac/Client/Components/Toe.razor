@using TicTac.Shared
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.SignalR.Client;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject HubConnection HubConnection

<AuthorizeView>
    <Authorized>
        @if (_started)
        {
            <div>@context.User.Identity.Name vs. @_opponentName</div>
        }
        else
        {
            <div>@context.User.Identity.Name</div>
        }
        <p>&nbsp;</p>
        <button @onclick="Register" disabled="@(!IsConnected || _registered)" class="btn btn-primary">Ready!</button>
        <p>&nbsp;</p>

        @if (_registered && !_started)
        {
            <div>Waiting for game to start...</div>
        }
        else if (_started)
        {
            @if (_myTurn)
            {
                <h2>@_style Your Turn!</h2>
            }
            else
            {
                <h2>@_style Wait...</h2>
            }
            <p>&nbsp;</p>

            <div class="board">
                @for (int i = 0; i < 3; i++)
                {
                    int x = i;
                    <div class="board-column">
                        @for (int j = 0; j < 3; j++)
                        {
                            int y = j;
                            <div class="gamepiece @_board.Board[i,j].ToString()" 
                                        @onclick="@(() => PieceClicked(x, y))" />
                        }
                    </div>
                }
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <LoginDisplay />
    </NotAuthorized>
</AuthorizeView>

@code {
    GameBoard _board;
    private bool _registered = false;
    private bool _started = false;
    private string _myName;
    private string _opponentName;
    private bool _amiFirst;
    private bool _myTurn = false;
    private string _connectionId;
    private PieceStyle _style = PieceStyle.Blank;
    private PieceStyle _opponentStyle => _style == PieceStyle.X ? PieceStyle.O : PieceStyle.X;
    private bool IsConnected => HubConnection.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        HubConnection.On<string>("Register", message =>
        {
            Console.WriteLine($"{message}");
            _registered = true;
            StateHasChanged();
        });

        HubConnection.On<string, string, bool>("GameStart", (myName, opponentName, first) =>
        {
            _started = true;
            _myName = myName;
            _opponentName = opponentName;
            _amiFirst = first;
            if (first)
            {
                _myTurn = true;
                _style = PieceStyle.X;
            }
            else
            {
                _style = PieceStyle.O;
            }
            _board = new GameBoard();
            StateHasChanged();
        });

        HubConnection.On<string, string>("broadcastMessage", (from, message) =>
        {
            Console.WriteLine($"From: {from}, Message: {message}");
        });

        HubConnection.On<PieceClick>("NotifyMove", (click) =>
        {
            Console.WriteLine($"{click.Style} clicked ({click.X},{click.Y}) ");
            _board.PieceClicked(click.X, click.Y, _opponentStyle);
            if(_board.IsFinished)
            {
            
            }

            _myTurn = true;
            StateHasChanged();
        });

        _connectionId = HubConnection.ConnectionId;
        Console.WriteLine(_connectionId);

        await HubConnection.StartAsync();
    }

    public async Task Register()
    {
        Console.WriteLine($"Registering... {HubConnection.ConnectionId}");
        await Http.GetAsync($"toe/register/{HubConnection.ConnectionId}");
    }

    public async ValueTask DisposeAsync()
    {
        if (HubConnection is not null)
        {
            await HubConnection.DisposeAsync();
        }
    }

    public async Task PieceClicked(int x, int y)
    {
        if (_myTurn)
        {
            if (_board.PieceClicked(x, y, _style))
            {
                await Http.PostAsJsonAsync<PieceClick>("toe/move", new PieceClick
                {
                    X = x,
                    Y = y,
                    Player = _myName,
                    Style = _style
                });
                if(_board.IsFinished)
                {
                    
                }

                _myTurn = false;
                StateHasChanged();
            }
        }
    }
}